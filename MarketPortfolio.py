# -*- coding: utf-8 -*-
"""PS1_406306460.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TwC7kDrXjj4PMNzA80Lgrh3iU09jgM-E
"""

!pip install wrds

!pip install --upgrade numpy scipy

import warnings
warnings.filterwarnings('ignore')

"""# Problem Set 1

## Loading Data and Other Pre-requisites
"""

# importing the required libraries

import os
import pandas as pd
import numpy as np
import wrds
from random import *
from dateutil.relativedelta import *
from pandas.tseries.offsets import *
import scipy.stats
import matplotlib.pyplot as plt
import datetime
import pandas_datareader

# connecting with the wrds account
conn = wrds.Connection(wrds_username="vrai")

#--- Using the code shared by Prof. Herskovic for data upload ---

# loading CRSP returns and changing variables format
crsp_raw = conn.raw_sql("""
    select a.permno, a.permco, a.date, b.shrcd, b.exchcd,
    a.ret, a.retx, a.shrout, a.prc, a.cfacshr, a.cfacpr
    from crspq.msf as a
    left join crsp.msenames as b
    on a.permno=b.permno
    and b.namedt<=a.date
    and a.date<=b.nameendt
    where a.date between '01/01/1900' and '12/31/2023'
""")

crsp_raw = crsp_raw.sort_values(['permno', 'date']).reset_index(drop=True).copy()
crsp_raw['permno'] = crsp_raw['permno'].astype(int)
crsp_raw['permco'] = crsp_raw['permco'].astype(int)
crsp_raw['date'] = pd.to_datetime(crsp_raw['date'], format='%Y-%m-%d', errors='ignore') + MonthEnd(0)

# loading delisting returns and cleaning the table
dlret_raw = conn.raw_sql("""
    select permno, dlret, dlstdt, dlstcd
    from crspq.msedelist
""")
dlret_raw = dlret_raw.sort_values(['permno', 'dlstdt']).reset_index(drop=True).copy()
dlret_raw.permno = dlret_raw.permno.astype(int)
dlret_raw['dlstdt'] = pd.to_datetime(dlret_raw['dlstdt'])
dlret_raw['date'] = dlret_raw['dlstdt'] + MonthEnd(0)

# Load data from Ken French website
FF3 = pandas_datareader.famafrench.FamaFrenchReader('F-F_Research_Data_Factors', start='1900', end=str(datetime.datetime.now().year+1))
FF3 = FF3.read()[0] / 100  # Monthly data
FF3.columns = ['MktRF', 'SMB', 'HML', 'RF']
FF3['Mkt'] = FF3['MktRF'] + FF3['RF']
FF3 = FF3.reset_index().rename(columns={"Date":"date"}).copy()
FF3['date'] = pd.DataFrame(FF3['date'].values.astype('datetime64[M]')) + MonthEnd(0)

# merging the delisted returns with the original returns in crsp data
crsp_dlret_merged = pd.merge(crsp_raw, dlret_raw[['permno', 'date', 'dlret']],
                             on=['permno', 'date'],
                             how='left')
crsp_dlret_merged['dlret'].fillna(0, inplace=True)

"""## Problem 1"""

def PS1_Q1(CRSP_Merged):

  # restricting the sample by EXCHCD and SHRCD
  CRSP_Merged = CRSP_Merged.set_index('permno')
  valid_exchcd = [-2, -1, 0, 1, 2, 3]  # NYSE, AMEX, NASDAQ
  valid_shrcd = [10, 11]  # Common shares
  CRSP_Merged = CRSP_Merged[(CRSP_Merged['exchcd'].isin(valid_exchcd)) & (CRSP_Merged['shrcd'].isin(valid_shrcd))]

  # calculating market cap column
  CRSP_Merged['MktCap'] = abs(CRSP_Merged['prc']) * CRSP_Merged['shrout']
  CRSP_Merged['Lag_MktCap'] = CRSP_Merged.groupby('permno')['MktCap'].shift(1)

  # replacing missing returns with 0
  CRSP_Merged['ret'] = CRSP_Merged['ret'].fillna(0)

  # Forward-fill missing prices and shares outstanding
  CRSP_Merged = CRSP_Merged.dropna(subset=['prc', 'shrout', 'ret'])

  # calculating cum-dividend returns
  CRSP_Merged['CumRet'] = (1 + CRSP_Merged['ret']) * (1 + CRSP_Merged['dlret']) - 1

  # calculating value-weighted and equal-weighted returns
  grouped = CRSP_Merged.groupby('date')
  vw_ret = grouped.apply(lambda x: np.sum(x['CumRet'] * x['Lag_MktCap']) / np.sum(x['Lag_MktCap']))
  ew_ret = grouped['CumRet'].mean()

  # combining the results into a single dataframe
  result = pd.DataFrame({ 'Stock_lag_MV': grouped['Lag_MktCap'].sum() / 1000000,  # converting to millions
                          'Stock_Ew_Ret': ew_ret,
                          'Stock_Vw_Ret': vw_ret})

  return result

output_q1 = PS1_Q1(crsp_dlret_merged)
output_q1.head()

"""## Problem 2"""

def calc_annualize_moments(returns, periods):

  # calculating all the annualized moments
  ann_mean = round(np.mean(returns) * 100 * periods, 2)
  ann_std = round(np.std(returns) * np.sqrt(periods) * 100, 2)
  ann_skew = round(scipy.stats.skew(returns), 2)
  ann_kurt = round(scipy.stats.kurtosis(returns), 2)
  return ann_mean, ann_std, ann_skew, ann_kurt

def PS1_Q2(Monthly_CRSP_Stocks, FF_mkt):

  # merging the two dataframes on date
  data = pd.merge(Monthly_CRSP_Stocks, FF_mkt, on=['date'], how='inner')

  # calculating excess returns
  data['Actual_FF_Excess'] = data['MktRF']
  data['Estimated_FF_Excess_Vw'] = data['Stock_Vw_Ret'] - data['RF']

  # calculating annualized moments for the entire period
  ann_mean_vw, ann_std_vw, ann_skew_vw, ann_kurt_vw = calc_annualize_moments(data['Estimated_FF_Excess_Vw'], 12)
  ann_mean_act, ann_std_act, ann_skew_act, ann_kurt_act = calc_annualize_moments(data['Actual_FF_Excess'], 12)

  # calculating annualized Sharpe Ratio
  sharpe_vw = round((ann_mean_vw) / ann_std_vw, 2)
  sharpe_act = round((ann_mean_act) / ann_std_act, 2)

  # creating output dataframe
  output = pd.DataFrame({
      'Actual FF Market Excess Return': [ann_mean_act, ann_std_act, sharpe_act, ann_skew_act, ann_kurt_act],
      'Estimated FF Market Excess Return': [ann_mean_vw, ann_std_vw, sharpe_vw, ann_skew_vw, ann_kurt_vw]
  }, index=['Annualized Mean', 'Annualized Standard Deviation', 'Annualized Sharpe Ratio', 'Skewness', 'Excess Kurtosis'])

  return output

output_q2 = PS1_Q2(output_q1, FF3)
output_q2

"""## Problem 3"""

def PS1_Q3(Monthly_CRSP_Stocks, FF_mkt):

  # merging the two dataframes on Year and Month
  data = pd.merge(Monthly_CRSP_Stocks, FF_mkt, on=['date'], how='inner')

  # calculating correlation and maximum absolute difference
  correlation = (data['Stock_Vw_Ret'] - data['RF']).corr(data['MktRF'])
  max_abs_diff = (data['Stock_Vw_Ret'] - data['RF'] - data['MktRF']).abs().max()

  output = {
        'Correlation': round(correlation, 8),
        'Maximum Absolute Difference (in %)': round(max_abs_diff*100, 4)
    }

  return output

output_q2 = PS1_Q3(output_q1, FF3)
print(output_q2)